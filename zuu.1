.\" Automatically generated by Pandoc 3.1.9
.\"
.TH "zuu" "1" "2024-08-24" "" ""
.SH NAME
zuu - A program to check your code quality before all commit.
.SH SYNOPSIS
zuu -m|\[en]mode mode
.SH KEYWORDS
.RS
.PP
Rust, linting, code quality, automation, developer tool, CLI, DevOps,
CI/CD, cargo check, cargo clippy, cargo fmt, cargo audit, cargo deny,
strictness levels, code hygiene, best practices, error prevention, code
consistency, maintainability, performance optimization
.RE
.SH DESCRIPTION
Think of zuu as your Rust project\[cq]s personal hygiene routine.
.PP
Just like you wouldn\[cq]t want to go out with messy hair or dirty
clothes, you also don\[cq]t want your Rust code to be sloppy or riddled
with potential problems.
zuu helps you keep your code clean and tidy, so it\[cq]s ready to show
off to the world.
.PP
Here\[cq]s the gist of what it does:
.PP
Checks Your Code\[cq]s Health: zuu runs a series of automated checks on
your Rust code.
.PP
It\[cq]s like a thorough medical checkup, making sure everything is in
order.
.PP
Spotting Errors and Bad Habits: It looks for obvious errors that would
prevent your code from even compiling, as well as more subtle issues
that might cause problems down the line (think of it as catching those
bad coding habits before they become a serious problem).
.PP
Enforcing Good Style: zuu also makes sure your code is well-formatted
and follows the accepted Rust style guidelines.
.PP
This is like making sure your code is neatly dressed and presentable.
.PP
Customizable Strictness: You can choose how strict you want zuu to be.
There are different levels of checks, from a basic once-over to an
ultra-thorough examination.
.PP
In simpler terms: zuu is like a combination of a spell checker, a
grammar checker, and a style guide for your Rust code.
It helps you write code that\[cq]s not only functional but also clean,
consistent, and easy to understand.
.PP
So, why would you use it?
.PP
Avoid Embarrassing Mistakes: zuu helps you catch those silly errors that
you might miss when you\[cq]re focused on the bigger picture.
.PP
Write Better Code: By enforcing good practices and style, zuu encourages
you to write cleaner, more maintainable code.
.PP
Work Well with Others: When your code is consistent and well-formatted,
it\[cq]s easier for other developers to understand and collaborate on
your project.
.PP
Peace of Mind: Knowing that your code has passed zuu\[cq]s rigorous
checks gives you confidence that it\[cq]s solid and ready for prime
time.
.SS TOOLS REQUIRED
.IP \[bu] 2
\f[CR]cargo\f[R]
.IP \[bu] 2
\f[CR]cargo-clippy\f[R]
.IP \[bu] 2
\f[CR]cargo-audit\f[R]
.IP \[bu] 2
\f[CR]cargo-auditable\f[R]
.IP \[bu] 2
\f[CR]cargo-spellcheck\f[R]
.IP \[bu] 2
\f[CR]cargo-deny\f[R]
.SS TOOL RECOMMENDED
.IP \[bu] 2
\f[CR]cargo-watch\f[R]
.SH OPTIONS
.IP \[bu] 2
\f[CR]ultra\f[R]: Every checkup and lints is turned on.
.PP
Your code will be scrutinised for even the tiniest inconsistencies or
potential issues.
.PP
It\[cq]s great for ensuring the highest possible code quality, but it
can also be the most time-consuming and might lead to more compilation
errors that you\[cq]ll need to address.
.IP \[bu] 2
\f[CR]high\f[R]: A comprehensive set of checks and lints are enabled,
focusing on correctness, style, and potential problems.
.PP
This is a good balance for most projects, ensuring your code is clean
and well-structured without being overly pedantic.
.IP \[bu] 2
\f[CR]medium\f[R]: A more relaxed set of checks, focusing on the most
essential aspects of code quality.
.PP
This is a good option if you want to catch major issues without getting
bogged down in minor stylistic details.
.IP \[bu] 2
\f[CR]low\f[R]: Only the most basic checks are enabled.
.PP
This is suitable for quick checks or for projects where you\[cq]re less
concerned about strict code quality enforcement.
.PP
Which one should you choose?
.PP
It depends on your project\[cq]s needs and your team\[cq]s preferences.
.PP
If you\[cq]re working on a critical project where code quality is
paramount, or if you have a team of experienced Rust developers,
\[lq]high\[rq] or even \[lq]ultra\[rq] might be the way to go.
.PP
If you\[cq]re working on a smaller project or if you\[cq]re new to Rust,
\[lq]medium\[rq] or \[lq]low\[rq] might be a better starting point.
.PP
You can always increase the strictness later as you become more
comfortable with Rust\[cq]s linting tools.
.PP
Remember, the goal is to find a balance that works for you and your
team.
zuu is a tool to help you write better code, not to hinder your
progress.
.SS EXAMPLES
.IP
.EX
zuu -m strict
.EE
.SS WATCH MODE
.IP
.EX
cargo-watch -- zuu -m scrict
.EE
.SS LINKS
.IP \[bu] 2
\c
.UR https://github.com/otechdo/zuu
Source code
.UE \c
.IP \[bu] 2
\c
.UR https://raw.githubusercontent.com/otechdo/zuu/main/LICENSE
License
.UE \c
.IP \[bu] 2
\c
.UR https://crates.io/crates/zuu
Crates.io
.UE \c
.SS BUGS
.IP \[bu] 2
\c
.UR https://github.com/otechdo/zuu/issues
Report a bug
.UE \c
.SS PULL REQUEST
.IP \[bu] 2
\c
.UR https://github.com/otechdo/zuu/pulls
Submit a pull request
.UE \c
