From 1f2e9f844a4e1e2698502562c8e17cedb2168c22 Mon Sep 17 00:00:00 2001
From: WIlly Micieli <otechdo@otechdo.com>
Date: Sun, 28 Jul 2024 19:21:02 +0200
Subject: [PATCH] Launch(next generation ): refactor the output

use indicative bar with custom task message

The following changes were made:

	* better output

The changes :

Co authored by : WIlly Micieli <otechdo@otechdo.com>
---
 Cargo.toml            |   7 +-
 README.md             |  28 ++++----
 commit/body.ji        |   0
 commit/description.ji |   0
 commit/footer.ji      |   0
 commit/scope.ji       |   0
 commit/summary.ji     |   0
 commit/why.ji         |   0
 src/helpers.rs        |  35 ---------
 src/main.rs           | 160 +++++++++++++++++++++++++++---------------
 zuu_debug             |   0
 11 files changed, 120 insertions(+), 110 deletions(-)
 create mode 100644 commit/body.ji
 create mode 100644 commit/description.ji
 create mode 100644 commit/footer.ji
 create mode 100644 commit/scope.ji
 create mode 100644 commit/summary.ji
 create mode 100644 commit/why.ji
 delete mode 100644 src/helpers.rs
 create mode 100644 zuu_debug

diff --git a/Cargo.toml b/Cargo.toml
index e328d54..4bb4066 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,13 +1,14 @@
 [package]
 name = "zuu"
-version = "17.0.0"
+version = "18.0.0"
 edition = "2021"
 license = "GPL-3.0-or-later"
-keywords = ["code", "quality", "production", "certified","rust"]
-categories = ["development-tools","development-tools::testing"]
+keywords = ["code", "quality", "production", "certified", "rust"]
+categories = ["development-tools", "development-tools::testing"]
 readme = "README.md"
 authors = ["Willy Micieli"]
 repository = "https://github.com/otechdo/zuu"
 description = "A program to check your code quality before all commit"
 
 [dependencies]
+indicatif = "0.17.8"
diff --git a/README.md b/README.md
index d4b920a..6ca8f2d 100644
--- a/README.md
+++ b/README.md
@@ -1,18 +1,18 @@
 - [@zuu](https://github.com/otechdo/zuu)
-  - [@way](https://github.com/otechdo/zuu/wiki/way)
-  - [@crates](https://crates.io/crates/zuu)
-  - [@wiki](https://github.com/otechdo/zuu/wiki)
-  - [@installation](https://github.com/otechdo/zuu/wiki/installation)
-  - [@bugs](https://github.com/otechdo/zuu/issues)
-  - [@roadmap](https://github.com/orgs/otechdo/projects/4/views/1)
-  - [@todo](https://github.com/orgs/otechdo/projects/4/views/3)
-  - [@discussions](https://github.com/otechdo/zuu/discussions)
-  - [@people](https://github.com/otechdo/zuu/people)
-  - [@contributors](https://github.com/otechdo/zuu/graphs/contributors)
-  - [@dependencies](https://github.com/otechdo/zuu/network/dependencies)
-  - [@pulse](https://github.com/otechdo/zuu/pulse)
-  - [@usage](https://github.com/otechdo/zuu/wiki/usage)
-  - [@discord](https://discord.gg/jWHjkpRJPw)
+  - [`@way`](https://github.com/otechdo/zuu/wiki/way)
+  - [`@crates`](https://crates.io/crates/zuu)
+  - [`@wiki`](https://github.com/otechdo/zuu/wiki)
+  - [`@installation`](https://github.com/otechdo/zuu/wiki/installation)
+  - [`@bugs`](https://github.com/otechdo/zuu/issues)
+  - [`@roadmap`](https://github.com/orgs/otechdo/projects/4/views/1)
+  - [`@todo`](https://github.com/orgs/otechdo/projects/4/views/3)
+  - [`@discussions`](https://github.com/otechdo/zuu/discussions)
+  - [`@people`](https://github.com/otechdo/zuu/people)
+  - [`@contributors`](https://github.com/otechdo/zuu/graphs/contributors)
+  - [`@dependencies`](https://github.com/otechdo/zuu/network/dependencies)
+  - [`@pulse`](https://github.com/otechdo/zuu/pulse)
+  - [`@usage`](https://github.com/otechdo/zuu/wiki/usage)
+  - [`@discord`](https://discord.gg/TuH2sVC5)
 
 ![command-settings-prefs](https://raw.githubusercontent.com/otechdo/zuu/main/img/gnome-builder-command.png)
 
diff --git a/commit/body.ji b/commit/body.ji
new file mode 100644
index 0000000..e69de29
diff --git a/commit/description.ji b/commit/description.ji
new file mode 100644
index 0000000..e69de29
diff --git a/commit/footer.ji b/commit/footer.ji
new file mode 100644
index 0000000..e69de29
diff --git a/commit/scope.ji b/commit/scope.ji
new file mode 100644
index 0000000..e69de29
diff --git a/commit/summary.ji b/commit/summary.ji
new file mode 100644
index 0000000..e69de29
diff --git a/commit/why.ji b/commit/why.ji
new file mode 100644
index 0000000..e69de29
diff --git a/src/helpers.rs b/src/helpers.rs
deleted file mode 100644
index 2b4162f..0000000
--- a/src/helpers.rs
+++ /dev/null
@@ -1,35 +0,0 @@
-use std::time::Instant;
-
-pub fn title(eta: &str, task: &str) {
-    println!("\n\x1b[1;32m     {eta}\x1b[0m {task}");
-}
-
-///
-/// # Panics
-///
-/// if the program is not founded or command error
-///
-pub fn msg(text: &str) {
-    println!("\n{text}");
-}
-
-pub fn ok(text: &str, started: Instant) {
-    println!(
-        "    \x1b[1;32mFinished\x1b[0m {text} take {}s",
-        started.elapsed().as_secs()
-    );
-}
-pub fn okay(text: &str) {
-    println!("    \x1b[1;32mFinished\x1b[0m {text}",);
-}
-
-pub fn failure(text: &str) {
-    println!("    \x1b[1;31mFinished\x1b[0m {text}",);
-}
-
-pub fn ko(text: &str, started: Instant) {
-    println!(
-        "    \x1b[1;31mFinished\x1b[1;37m {text} take {}s\x1b[0m",
-        started.elapsed().as_secs()
-    );
-}
diff --git a/src/main.rs b/src/main.rs
index 291e2f6..da4390c 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -1,78 +1,122 @@
-use crate::helpers::okay;
-use crate::Language::{Rust, Unknown};
-use std::collections::HashMap;
-use std::path::Path;
+use indicatif::{ProgressBar, ProgressStyle};
+use std::env::current_dir;
+use std::fs::{read_to_string, File};
+use std::path::MAIN_SEPARATOR_STR;
+use std::{
+    fs::create_dir_all,
+    path::Path,
+    process::{exit, Command, ExitCode},
+    thread::sleep,
+    time::Duration,
+};
+const ZUU_OUT_DIR: &str = "zuu";
 
-pub mod helpers;
-
-use std::process::{exit, Command, ExitCode};
-
-const RUST: &str = "Cargo.toml";
 const EXIT_SUCCESS: i32 = 0;
 const EXIT_FAILURE: i32 = 1;
 const RUST_TASKS: [&str; 4] = [
     "verify-project",
     "clippy -- -F keyword_idents -F warnings -F let-underscore -F rust-2018-compatibility -F rust-2018-idioms  -F rust-2021-compatibility -F future-incompatible -F unused -F unused_crate_dependencies -F unused_extern_crates -F unused_macro_rules -F unused_results -F unused_qualifications -F nonstandard-style -F macro_use_extern_crate -F absolute_paths_not_starting_with_crate -F ambiguous_glob_imports -F clippy::all -F clippy::perf -F clippy::pedantic -F clippy::style -F clippy::suspicious -F clippy::correctness -F clippy::nursery -F clippy::complexity -D clippy::cargo",
-    "test -j 4 --no-fail-fast",
-    "fmt --check",
+    "test -j 4 --no-fail-fast -- --show-output",
+    "fmt --check"
 ];
 
-fn exist(file: &str) -> bool {
-    Path::new(file).exists()
-}
+const RUST_TASKS_FILENAME: [&str; 4] = ["project.ji", "clippy.ji", "test.ji", "fmt.ji"];
 
-enum Language {
-    Rust,
-    Unknown,
-}
+const RUST_TASKS_TITLE_MESSAGE: [&str; 4] = [
+    "Check if the project is correctly configured",
+    "Check if the source code is correct",
+    "Run test",
+    "Check code format",
+];
+const RUST_TASKS_SUCCESS_MESSAGE: [&str; 4] = [
+    "The project is correctly configured",
+    "Your code is optimized",
+    "Test passes checkup",
+    "Your code respect correctly formatted",
+];
+
+const RUST_TASKS_FAILURES_MESSAGE: [&str; 4] = [
+    "The project is not correctly configured",
+    "Your code must be optimized",
+    "Test no passes checkup",
+    "Your code is not correctly formatted",
+];
 
 ///
 /// # Panics
 ///
-fn check_rust() -> i32 {
-    if exist(RUST) {
-        for todo in RUST_TASKS {
-            let command_part: Vec<&str> = todo.split_whitespace().collect();
-            assert!(Command::new("cargo")
-                .args(command_part)
-                .spawn()
-                .unwrap()
-                .wait()
-                .unwrap()
-                .success());
-        }
-        okay("Your code can be committed");
-        return EXIT_SUCCESS;
-    }
-    okay(format!("No {RUST} has been founded").as_str());
-    EXIT_FAILURE
+fn check(t: &str, x: usize) -> bool {
+    let command_part: Vec<&str> = t.split_whitespace().collect();
+    Command::new("cargo")
+        .args(command_part)
+        .stderr(
+            File::create(error(RUST_TASKS_FILENAME[x]).as_str())
+                .expect("failed to create output filename"),
+        )
+        .stdout(
+            File::create(success(RUST_TASKS_FILENAME[x]).as_str())
+                .expect("failed to create output filename"),
+        )
+        .spawn()
+        .unwrap()
+        .wait()
+        .unwrap()
+        .success()
+}
+fn error(x: &str) -> String {
+    format!("{ZUU_OUT_DIR}{MAIN_SEPARATOR_STR}stderr{MAIN_SEPARATOR_STR}{x}")
+}
+fn success(x: &str) -> String {
+    format!("{ZUU_OUT_DIR}{MAIN_SEPARATOR_STR}stdout{MAIN_SEPARATOR_STR}{x}")
 }
 
-fn check(language: &Language) -> i32 {
-    match language {
-        Rust => check_rust(),
-        Unknown => {
-            println!("Language not supported");
-            EXIT_FAILURE
-        }
+///
+/// # Panics
+///
+fn main() -> ExitCode {
+    let binding = current_dir().expect("failed to get current dir");
+    let project: Option<&str> = binding
+        .to_str()
+        .expect("msg")
+        .split(MAIN_SEPARATOR_STR)
+        .last();
+
+    if Path::new(ZUU_OUT_DIR).is_dir().eq(&false) {
+        assert!(create_dir_all(format!("{ZUU_OUT_DIR}{MAIN_SEPARATOR_STR}stderr")).is_ok());
+        assert!(create_dir_all(format!("{ZUU_OUT_DIR}{MAIN_SEPARATOR_STR}stdout")).is_ok());
     }
-}
 
-fn detect() -> &'static Language {
-    for (f, l) in &all() {
-        if Path::new(f.as_str()).exists() {
-            return l;
+    let pb = ProgressBar::new(5)
+        .with_message("Check if the code can be commited")
+        .with_style(
+            ProgressStyle::default_bar()
+                .template("[{bar:50.white}] {msg}")
+                .expect("")
+                .progress_chars("= "),
+        );
+    for x in 0..4 {
+        pb.set_message(RUST_TASKS_TITLE_MESSAGE[x]);
+        sleep(Duration::from_millis(500));
+        if check(RUST_TASKS[x], x).eq(&false) {
+            pb.finish_with_message(RUST_TASKS_FAILURES_MESSAGE[x]);
+            println!(
+                "\n\nstderr :\n\n{}\nstdout :\n\n{}\nBug report  : <https://github.com/otechdo/zuu/issues>\n\nSource code : <https://github.com/otechdo/zuu>\n\n",
+                read_to_string(error(RUST_TASKS_FILENAME[x]).as_str())
+                    .expect("failed to get last error"),
+                read_to_string(success(RUST_TASKS_FILENAME[x]).as_str())
+                    .expect("failed to get last error")
+            );
+            exit(EXIT_FAILURE);
+        } else {
+            pb.set_message(RUST_TASKS_SUCCESS_MESSAGE[x]);
         }
+        pb.inc(1);
+        sleep(Duration::from_millis(500));
     }
-    &Unknown
-}
-
-fn all() -> HashMap<String, &'static Language> {
-    let mut all: HashMap<String, &Language> = HashMap::new();
-    assert!(all.insert(String::from(RUST), &Rust).is_none());
-    all
-}
-
-fn main() -> ExitCode {
-    exit(check(detect()))
+    pb.finish_with_message(format!(
+        "Congratulations {} your {} project can be commited",
+        std::env::var("USER").expect("no USER variable founded"),
+        project.expect("failed to get the project name")
+    ));
+    exit(EXIT_SUCCESS);
 }
diff --git a/zuu_debug b/zuu_debug
new file mode 100644
index 0000000..e69de29
-- 
2.45.2

